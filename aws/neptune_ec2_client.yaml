Description: Demo Template to create Neptune EC2 Client with gremlin and rdf4j console
Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-14c5486b
    us-east-2:
      AMI: ami-922914f7
    us-west-2:
      AMI: ami-e251209a
    eu-west-1:
      AMI: ami-ca0135b3
Parameters:
  ParentVPCStack:
    Description: 'Stack name of parent VPC'
    Type: String
  EC2SSHKeyPairName:
    Description: >-
      Name of an existing EC2 KeyPair to enable SSH access to the instances.
      Required Input
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: Must be the name of an existing EC2 KeyPair in same region.
  Env:
    Description: 'Environment tag, e.g. prod, nonprod.'
    Default: test
    Type: String
    AllowedPattern: '[a-z0-9]+'
    MaxLength: 15
  EC2ClientInstanceType:
    Description: EC2 client instance
    Type: String
    Default: t2.small
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - r4.large
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
    ConstraintDescription: Must be a valid EC2 instance type.
  NeptuneEC2ClientCustomizationScript:
    Description: Neptune EC2 client customization script
    Type: String
    Default: ''
  NeptuneEC2ClientExtraSG:
    Description: Neptune EC2 client custom SG
    Type: String
    Default: ''
  SetupGremlinConsole:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Description: Setup Gremlin console.
  SetupRDF4JConsole:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Description: Setup RDF4J console.
  AttachBulkloadIAMRoleToNeptuneCluster:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Description: Attach Bulkload IAM role to cluster

Conditions:
  AddExtraSGPresent: !Not
    - !Equals
      - !Ref NeptuneEC2ClientExtraSG
      - ''
  SetupGremlinConsoleCondition: !Equals
    - !Ref SetupGremlinConsole
    - 'true'
  SetupRDF4JConsoleCondition: !Equals
    - !Ref SetupRDF4JConsole
    - 'true'
  AttachBulkloadIAMRoleToNeptuneClusterCondition: !Equals
    - !Ref AttachBulkloadIAMRoleToNeptuneCluster
    - 'true'
Resources:
  NeptuneEC2ClientRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - 'sts:AssumeRole'
      Path: /
  NeptuneEC2InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
      - !Ref NeptuneEC2ClientRole
    DependsOn:
    - NeptuneEC2ClientRole
  NeptuneAccessPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: NeptuneAccessPolicy
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action:
          - 'rds:*'
          - 'iam:GetAccountSummary'
          - 'iam:ListAccountAliases'
          - 'iam:PassRole'
          Resource: '*'
      Roles:
      - !Ref NeptuneEC2ClientRole
  NeptuneLoadFromS3Role:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - rds.amazonaws.com
          Action:
          - 'sts:AssumeRole'
      Path: /
  NeptuneLoadFromS3Policy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: NeptuneLoadFromS3Policy
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action:
          - 's3:Get*'
          - 's3:List*'
          Resource: '*'
      Roles:
      - !Ref NeptuneLoadFromS3Role
  NeptuneEC2ClientInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      KeyName: !Ref EC2SSHKeyPairName
      InstanceType: !Ref EC2ClientInstanceType
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      SubnetId: {'Fn::ImportValue': !Sub '${ParentVPCStack}-Subnet1'}
      SecurityGroupIds:
        - 'Fn::ImportValue': !Sub '${ParentVPCStack}-DefaultSG'
        - 'Fn::ImportValue': !Sub '${ParentVPCStack}-NeptuneSG'
        - !If
          - AddExtraSGPresent
          - !Ref NeptuneEC2ClientExtraSG
          - !Ref 'AWS::NoValue'
      Tags:
        - Key: Name
          Value: !Sub 'Neptune-${Env}'
        - Key: StackId
          Value: !Sub '${AWS::StackName}'
        - Key: Stack
          Value: !Sub '${AWS::Region}-${AWS::StackName}'
        - Key: Application
          Value: NeptuneCloudformation
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash -xe
          echo "Creating /opt/port_forwading.sh" > /home/ec2-user/init.log
          cat > /opt/port_forwading.sh << 'EOL'
          sudo echo "1" >/proc/sys/net/ipv4/ip_forward
          SOURCE=$(hostname -I | awk '{print $1}')
          DEST=$(getent hosts $1 | awk '{print $1}')
          sudo iptables -A INPUT -m tcp -p tcp --dport 22 -j ACCEPT
          sudo iptables -A INPUT -i lo -j ACCEPT
          sudo iptables -t nat -A INPUT -i lo -j ACCEPT
          sudo iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
          sudo iptables -P INPUT DROP
          sudo iptables -t nat -A PREROUTING -p tcp -i lo -j DNAT --to-destination $DEST:8182
          sudo iptables -t nat -A POSTROUTING -p tcp -d $DEST -j SNAT --to-source $SOURCE
          EOL
          sudo sed -i "s~DEST:8182~{DEST}:8182~g" /opt/port_forwading.sh
          echo "Executing user data" >> /home/ec2-user/init.log
          echo "/opt/aws/bin/cfn-signal -e 0 '${WaitHandle}'" >> /home/ec2-user/cfn.sh
          echo "echo 'Signals should be sent' >  /home/ec2-user/init.log" >> /home/ec2-user/cfn.sh
          sudo sh /home/ec2-user/cfn.sh


#              #!/bin/bash -xe
#            - 'yum update -y '
#            - |+
#
#            - yum -y install java-1.8.0-devel
#            - |+
#
#            - yum -y remove java-1.7.0-openjdk
#            - |+
#
#            - cur_dir=$PWD
#            - |+
#
#            - cd /home/ec2-user/
#            - |+
#
#            - pip install --upgrade awscli
#            - |+
#
#            - !If
#              - AttachBulkloadIAMRoleToNeptuneClusterCondition
#              - !Join
#                - ''
#                - - 'aws neptune add-role-to-db-cluster '
#                  - '--region '
#                  - !Ref 'AWS::Region'
#                  - ' --db-cluster-identifier '
#                  - !Ref NeptuneDBCluster
#                  - ' --role-arn '
#                  - !Ref NeptuneLoadFromS3IAMRoleArn
#                  - |+
#
#              - !Ref 'AWS::NoValue'
#            - |+
#
#            - !If
#              - SetupGremlinConsoleCondition
#              - !Join
#                - ''
#                - - >-
#                    wget
#                    https://archive.apache.org/dist/tinkerpop/3.3.2/apache-tinkerpop-gremlin-console-3.3.2-bin.zip
#                  - |+
#
#                  - unzip apache-tinkerpop-gremlin-console-3.3.2-bin.zip
#                  - |+
#
#                  - rm apache-tinkerpop-gremlin-console-3.3.2-bin.zip
#                  - |+
#
#                  - cd apache-tinkerpop-gremlin-console-3.3.2/conf
#                  - |+
#
#                  - 'echo hosts: ['
#                  - !Ref NeptuneDBClusterEndpoint
#                  - '] >> neptune-remote.yaml'
#                  - |+
#
#                  - 'echo port: '
#                  - !Ref NeptuneDBClusterPort
#                  - ' >> neptune-remote.yaml'
#                  - |+
#
#                  - >-
#                    echo serializer: { className:
#                    org.apache.tinkerpop.gremlin.driver.ser.GryoMessageSerializerV3d0,
#                    config: { serializeResultToString: true }}
#                  - ' >> neptune-remote.yaml'
#                  - |+
#
#              - !Ref 'AWS::NoValue'
#            - |+
#
#            - cd /home/ec2-user
#            - |+
#
#            - !If
#              - SetupRDF4JConsoleCondition
#              - !Join
#                - ''
#                - - >-
#                    wget
#                    https://ftp.osuosl.org/pub/eclipse/rdf4j/eclipse-rdf4j-2.3.2-sdk.zip
#                  - |+
#
#                  - unzip eclipse-rdf4j-2.3.2-sdk.zip
#                  - |+
#
#                  - rm eclipse-rdf4j-2.3.2-sdk.zip
#                  - |+
#
#              - !Ref 'AWS::NoValue'
#            - |+
#
#            - !Ref NeptuneEC2ClientCustomizationScript
#            - |+
#
#            - cd $cur_dir
#            - |+
#
#            - |
#              # Send signal to WaitHandle that the setup is completed
#            - /opt/aws/bin/cfn-signal -e 0 --region ${AWS::Region} --stack ${AWS::StackName} --resource WaitHandle
            #- ' -e 0'
            #- ' '''
            #- !Ref WaitHandle
            #- ''''
            #- |+
    Metadata:
      'AWS::CloudFormation::Init':
        config:
          packages:
            yum: {}
#  PublicRoute:
#    Type: 'AWS::EC2::Route'
#    Properties:
#      DestinationCidrBlock: 0.0.0.0/0
#      InstanceId: !Ref NeptuneEC2ClientInstance
#      RouteTableId: {'Fn::ImportValue': !Sub '${ParentVPCStack}-PublicRouteTable'}
  WaitHandle:
    Type: 'AWS::CloudFormation::WaitConditionHandle'
  WaitCondition:
    Type: 'AWS::CloudFormation::WaitCondition'
    DependsOn: NeptuneEC2ClientInstance
    Properties:
      Handle: !Ref WaitHandle
      Timeout: '2400'
Outputs:
  NeptuneLoadFromS3IAMRoleArn:
    Description: IAM Role for loading data in Neptune
    Value: !GetAtt
    - NeptuneLoadFromS3Role
    - Arn
  EC2Client:
    Description: EC2 client Identifier
    Value: !Ref NeptuneEC2ClientInstance
  SSHAccess:
    Description: This is how you gain remote access to the EC2 client.
    Value: !Join
      - ''
      - - ssh ec2-user@
        - !GetAtt
          - NeptuneEC2ClientInstance
          - PublicIp
        - ' -i '
        - !Ref EC2SSHKeyPairName
        - .pem
  EC2SSHTunnelCommand:
    Description: >-
      Command to connect to the local web server on the EC2 in VPC, you create
      an SSH tunnel between your computer and the EC2 node. This is also known
      as port forwarding.
    Value: !Join
      - ''
      - - ssh ec2-user@
        - !GetAtt
          - NeptuneEC2ClientInstance
          - PublicIp
        - ' -i '
        - !Ref EC2SSHKeyPairName
        - '.pem -L localhost:8080:localhost:8080'
  NeptuneEC2InstanceProfile:
    Description: Neptune EC2 Instance Profile
    Value: !Ref NeptuneEC2InstanceProfile